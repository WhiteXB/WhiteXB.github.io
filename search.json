[{"title":"SpringMVC的视图","date":"2021-10-26T11:43:01.000Z","url":"/2021/10/26/SpringMVC%E7%9A%84%E8%A7%86%E5%9B%BE/","tags":[["框架","/tags/%E6%A1%86%E6%9E%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"SpringMVC的视图SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户SpringMVC视图的种类很多，默认有转发视图和重定向视图当工程引入jstl的依赖，转发视图会自动转换为JstlView若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView ThymeleafView当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转 SpringMVC中默认的转发视图是InternalResourceViewSpringMVC中创建转发视图的情况：当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转例如”forward:/“，”forward:/employee” 重定向视图SpringMVC中默认的重定向视图是RedirectView当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转例如”redirect:/“，”redirect:/employee” 注：重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径 视图控制器view-controller当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view\u0002controller标签进行表示 注：当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：&lt;mvc:annotation-driven /&gt;"},{"title":"spring域对象","date":"2021-10-26T04:31:31.000Z","url":"/2021/10/26/spring%E5%9F%9F%E5%AF%B9%E8%B1%A1/","tags":[["框架","/tags/%E6%A1%86%E6%9E%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"域对象共享数据使用ServletAPI向request域对象共享数据 使用ModelAndView向request域对象共享数据（最后都会封装到modelAndView） 使用Model向request域对象共享数据 使用map向request域对象共享数据 使用ModelMap向request域对象共享数据 Model、ModelMap、Map的关系Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的 向session域共享数据 向application域共享数据 34集搭建工程"},{"title":"通过POJO获取请求参数","date":"2021-10-25T07:56:07.000Z","url":"/2021/10/25/%E9%80%9A%E8%BF%87POJO%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/","tags":[["框架","/tags/%E6%A1%86%E6%9E%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"通过POJO获取请求参数可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值创建包bean 创建类user设置有参无参方法生成get set tostring方法 解决获取请求参数的乱码问题解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册一种是get的乱码问题，一种是post的乱码问题 GET请求直接在tomcat中修改添加 post请求在 注：SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效"},{"title":"SpringMVC支持ant风格的路径和参数请求","date":"2021-10-23T10:15:04.000Z","url":"/2021/10/23/SpringMVC%E6%94%AF%E6%8C%81ant%E9%A3%8E%E6%A0%BC%E7%9A%84%E8%B7%AF%E5%BE%84/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"ant风格的路径？：表示任意的单个字符*：表示任意的0个或多个字符：表示任意的一层或多层目录注意：在使用时，只能使用/**/xxx的方式 springMVC支持路径中的占位符号原始方式：/deleteUser?id=1rest方式：/deleteUser/1 SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参 SpringMVC获取请求参数通过ServletAPI获取将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象 使用原生的方法就是在侮辱springMVC。 通过控制器方法的形参获取请求参数在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参 注：若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数若使用字符串数组类型的形参，此参数的数组中包含了每一个数据若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果。get请求会将复选框的内容拼接到请求地址中 以数组的形式接受 @RequestParam@RequestParam是将请求参数和控制器方法的形参创建映射关系@RequestParam注解一共有三个属性：value：指定为形参赋值的请求参数的参数名required：设置是否必须传输此请求参数，默认值为true若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为nulldefaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值 @RequestHeader@RequestHeader是将请求头信息和控制器方法的形参创建映射关系@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam @CookieValue@CookieValue是将cookie数据和控制器方法的形参创建映射关系@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam 通过POJO获取请求参数可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值 解决获取请求参数的乱码问题解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册 注：SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效。"},{"title":"RequestMapping注解","date":"2021-10-23T08:24:37.000Z","url":"/2021/10/23/RequestMapping%E6%B3%A8%E8%A7%A3/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"@RequestMapping注解的功能从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。 @RequestMapping注解的位置@RequestMapping标识一个类：设置映射请求的请求路径的初始信息@RequestMapping标识一个方法：设置映射请求请求路径的具体信息 @RequestMapping注解的value属性@RequestMapping注解的value属性通过请求的请求地址匹配请求映射@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射 报错There is already ‘requestMappingController’ bean method两个相同路径报错ctrl+t快速进入类 请求路径 method属性获取请求post get请求 对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解处理get请求的映射–&gt;@GetMapping处理post请求的映射–&gt;@PostMapping处理put请求的映射–&gt;@PutMapping处理delete请求的映射–&gt;@DeleteMapping 常用的请求方式有get，post，put，delete但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到params属性@RequestMapping注解的params属性通过请求的请求参数匹配请求映射@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系“param”：要求请求映射所匹配的请求必须携带param请求参数“!param”：要求请求映射所匹配的请求必须不能携带param请求参数“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value ?可以用括号代替&amp;以逗号隔开若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actualrequest parameters: username={admin}, password={123456}RequestMapping注解的headers属性（了解）@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系“header”：要求请求映射所匹配的请求必须携带header请求头信息“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到 "},{"title":"springMVC框架","date":"2021-10-15T09:04:39.969Z","url":"/2021/10/15/springmvc/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"什么是MVCMVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分M：Model，模型层，指工程中的JavaBean，作用是处理数据JavaBean分为两类：一类称为实体类Bean：专门存储业务数据的，如 Student、User 等一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器 SpringMVCSpringMVC是Spring的一个后续产品，是Spring的一个子项目SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的首选方案。 idea创建maven工程1.创建maven目录2.选择maven库，定位maven使用资源3.配置pom.xml打包方式4.structure项目结构添加目录webapp/WEB-INF/web.xml pom.xml springMVC.xml 创建请求控制器创建由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器请求控制器中每一个处理请求的方法成为控制器方法因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在 配置springMVC的配置文件 第一个程序 添加配置tomcat 在tomacat中选择项目然后添加loca总结浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面 "},{"title":"filter拦截","date":"2021-10-12T09:12:11.000Z","url":"/2021/10/12/filter%E6%8B%A6%E6%88%AA/","categories":[["undefined",""]],"content":"xml filter emm报告会一言难尽"},{"title":"session会话","date":"2021-10-09T11:30:48.000Z","url":"/2021/10/09/session%E4%BC%9A%E8%AF%9D/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"什么是Session会话1.Session就是一个接口2.Session就是会话，他们用来维护一个客户端和服务器之间的关联的一种技术3.每个客户端都有自己的一个Session会话4.Session会话中，我们经常用来保护用户登录之后的消息 如何创建Session和获取（id号，是否为新） html css js 会热部署 存数据取数据 Session的存活时长 默认存活时长1800秒如果说web工程中要修改，可以在web.xml中修改默认修改session.invalidate();//马上超时 浏览器和Session之间关联的内幕session会话放到内存中request.write()返回客户端，返回cookiesession是cookie值每次创建session会话会创建一个cookie值，JSESSION值一直为是新创建出来的id值浏览器解析数据，马上创建一个cookie数据每次请求把session的id值发送给服务器，通过Cookie值找到创建好的Session对象，并返回 表单重复提交–验证码已经引入架包给服务器，注册界面已生成验证码点击验证只适用与谷歌，以接入+d="},{"title":"cookie机制","date":"2021-10-08T07:30:00.000Z","url":"/2021/10/08/cookie%E6%9C%BA%E5%88%B6/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"Cookie 饼干Cookie 饼干1、Cookie 翻译过来是饼干的意思。2、Cookie 是服务器通知客户端保存键值对的一种技术。3、客户端有了 Cookie 后，每次请求都发送给服务器。4、每个 Cookie 的大小不能超过 4kb 如何创建 Cookie 服务器如何获取 Cookie 一般不支持空格等 服务器如何修改 Cookie cookie的生命方法Cookie 的生命控制指的是如何管理Cookie 什么时候被销毁（删除）setMaxAge()正数，表示在指定的秒数后过期 负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） 零，表示马上删除 Cookie cookie的pathpath属性是根据请求的地址进行过滤Cookie 的 path 属性可以有效的过滤哪些Cookie 可以发送给服务器。哪些不发。path 属性是通过请求的地址来进行有效的过滤。CookieA path=/工程路径CookieB path=/工程路径/abc 请求地址如下： 工程路径/a.html CookieA 发送 CookieB 不发送 工程路径/abc/a.html CookieA 发送 CookieB 发送 cookie免用户名登录"},{"title":"查询操作","date":"2021-10-07T07:19:49.000Z","url":"/2021/10/07/%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/","tags":[["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"数据库的查询操作区间查询可以把日程抽象成数据 web层 service层 dao层 国庆几天终于把前端的数据和分页搞定了，太艰难了"},{"title":"增删改查","date":"2021-10-04T01:46:01.000Z","url":"/2021/10/04/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/","tags":[["JAVA","/tags/JAVA/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"前台不需要权限检查就可以访问的资源，功能都必须进行的功能 后台后台是给管理员使用的一般都需要权限检查才可以访问到的页面和功能 传输数据时记得一定要设置 遗留问题id不规范 分页pageNo 当前页码pageTotal 总页码pageTotalCount 总记录数pageSize 每页显示总量item 当前页数据 pageNo 当前页码显示时由客户端进行传输pageSize 每页的显示数量由两种因素决定pageTotaiCount 总记录数可以由sql语句球的sql语句时：select count() form 表名items是当前页数，也可以由sql语句求得sql语句是：select * from 表名 limit begin ，pageSizebegin可以由公式求得 (pageNo-1)pageSize;假设，当前是第一页，每页四条记录则begin=（1-1）4 得0假设，当前是第二页，每页四条记录则begin=（2-1）4 得4假设，当前是第三页，每页四条记录则begin=（3-1）*4 得8 一个数据传输错误的隐藏抛出 页码显示多显示一页的bug尚未得到有效解决，在第二轮时寻求更改办法 通过debug方法寻找到bug问题，发现是求余时变量应用错误，已经修改 在修改分页数目时遇到数据量不足仍然会，数组越界 已经解决 在前端加了个1 el分界"},{"title":"模块","date":"2021-10-02T05:27:00.000Z","url":"/2021/10/02/%E6%A8%A1%E5%9D%97/","tags":[["JAVA","/tags/JAVA/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"编写数据库表 编写员工模块的javaBean 编写员工模块的dao和测试 编写员工模块的service和测试service 编写员工模块的web层 和页面联测试 心得数据库提前设计好，后序变量名尽量少进行改动符号一定要注意，千万不要因为符号导致报错少抽烟，会死的"},{"title":"beanutils工具包","date":"2021-09-30T10:35:15.000Z","url":"/2021/09/30/beanutils%E5%B7%A5%E5%85%B7%E5%8C%85/","tags":[["JAVA","/tags/JAVA/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"Beanutils将数据一次性注入不必逐个输入"},{"title":"算法","date":"2021-09-28T05:46:20.000Z","url":"/2021/09/28/%E7%AE%97%E6%B3%95%E2%80%9C/","tags":[["文件","/tags/%E6%96%87%E4%BB%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":""},{"title":"操作系统实验","date":"2021-09-23T04:07:26.000Z","url":"/2021/09/23/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/","tags":[["操作系统","/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"列举系统启动进程 进程互斥实验1）线程的创建Win32 提供了一系列的API函数来完成线程的创建、挂起、恢复、终结以及通信等工作。下面将选取其中的一些重要函数进行说明。① HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, DWORD dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);该函数在其调用进程的进程空间里创建一个新的线程，并返回已建线程的句柄，其中各参数说明如下：lpThreadAttributes：指向一个 SECURITY_ATTRIBUTES 结构的指针，该结构决定了线程的安全属性，一般置为 NULL；dwStackSize：指定了线程的堆栈深度，一般都设置为0；lpStartAddress：表示新线程开始执行时代码所在函数的地址，即线程的起始地址。一般情况为(LPTHREAD_START_ROUTINE)ThreadFunc，ThreadFunc 是线程函数名；lpParameter：指定了线程执行时传送给线程的32位参数，即线程函数的参数；dwCreationFlags：控制线程创建的附加标志，可以取两种值。如果该参数为0，线程在被创建后就会立即开始执行；如果该参数为CREATE_SUSPENDED,则系统产生线程后，该线程处于挂起状态，并不马上执行，直至函数ResumeThread被调用；lpThreadId：该参数返回所创建线程的ID；如果创建成功则返回线程的句柄，否则返回NULL。② DWORD SuspendThread(HANDLE hThread);该函数用于挂起指定的线程，如果函数执行成功，则线程的执行被终止。③ DWORD ResumeThread(HANDLE hThread);该函数用于结束线程的挂起状态，执行线程。④ VOID ExitThread(DWORD dwExitCode);该函数用于线程终结自身的执行，主要在线程的执行函数中被调用。其中参数dwExitCode用来设置线程的退出码。⑤ BOOL TerminateThread(HANDLE hThread,DWORD dwExitCode); 一般情况下，线程运行结束之后，线程函数正常返回，但是应用程序可以调用TerminateThread强行终止某一线程的执行。各参数含义如下：hThread：将被终结的线程的句柄；dwExitCode：用于指定线程的退出码。 使用TerminateThread()终止某个线程的执行是不安全的，可能会引起系统不稳定；虽然该函数立即终止线程的执行，但并不释放线程所占用的资源。因此，一般不建议使用该函数。⑥ BOOL PostThreadMessage(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam);该函数将一条消息放入到指定线程的消息队列中，并且不等到消息被该线程处理时便返回。idThread：将接收消息的线程的ID；Msg：指定用来发送的消息；wParam：同消息有关的字参数；lParam：同消息有关的长参数；调用该函数时，如果即将接收消息的线程没有创建消息循环，则该函数执行失败。2)互斥量的创建互斥量的作用是保证每次只能有一个线程获得互斥量而得以继续执行，使用CreateMutex函数创建:HANDLE CreateMutex( LPSECURITY_ATTRIBUTES lpMutexAttributes, // 安全属性结构指针，可为NULL BOOL bInitialOwner, // 当前建立互斥量是否占有该互斥量 //TRUE表示占有，这样其他线程就不能获得此互斥量也就无法进入由 //该互斥量控制的临界区。FALSE表示不占有该互斥量 LPCTSTR lpName // 信号量的名称，字符数不可多于MAX_PATH //如果遇到同名的其他信号量函数就会失败，如果遇到同类信号同名 //也要注意变化);3)阻塞函数如果等待的信号量不可用，那么线程就会挂起，直到信号可用线程才会被唤醒，该函数会自动修改信号，如Event，线程被唤醒之后Event信号会变得无信号，Mutex、Semaphore等也会变。我们使用WaitForSingleObject函数等待信号，如果要等待多个信号可以使用WaitForMutipleObject函数。DWORD WaitForSingleObject( HANDLE hHandle, // 等待对象的句柄 DWORD dwMilliseconds // 等待毫秒数，INFINITE表示无限等待);参数hHandle是一个事件的句柄，第二个参数dwMilliseconds是时间间隔。如果时间是有信号状态返回WAIT_OBJECT_0，如果时间超过dwMilliseconds值但时间事件还是无信号状态则返回WAIT_TIMEOUT。hHandle可以是下列对象的句柄：Change notification Console input Event Job Memory resource notification Mutex Process Semaphore Thread Waitable timerWaitForSingleObject函数用来检测hHandle事件的信号状态，当函数的执行时间超过dwMilliseconds就返回，但如果参数dwMilliseconds为INFINITE时函数将直到相应时间事件变成有信号状态才返回，否则就一直等待下去，直到WaitForSingleObject有返回直才执行后面的代码。 线程创建 线程互斥 进程同步实验1．同步对象同步对象是指Windows中用于实现同步与互斥的实体，包括信号量(Semaphore)、互斥量(Mutex)、临界区(Critical Section)和事件(Events)等。本实验中使用到信号量、互斥量和临界区三个同步对象。同步对象的使用步骤：创建/初始化同步对象。请求同步对象，进入临界区(互斥量上锁)。释放同步对象(互斥量解锁)。这些对象在一个线程中创建，在其他线程中都可以使用，实现同步与互斥。2．相关API的功能及使用我们利用Windows SDK提供的API编程实现实验题目要求，而VC中包含有Windows SDK的所有工具和定义。要使用这些API，需要包含堆这些函数进行说明的SDK头文件——最常见的是Windows.h(特殊的API调用还需要包含其他头文件)。下面给出的是本实验使用到的API的功能和使用方法简单介绍。(1) CreateThread功能——创建一个在调用进程的地址空间中执行的线程格式HANDLE CreateThread( LPSECURITY_ATTRIBUTES lpThreadAttributes,DWORD dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParamiter,DWORD dwCreationFlags,Lpdword lpThread );参数说明lpThreadAttributes——指向一个LPSECURITY_ATTRIBUTES(新线程的安全性描述符)。dwStackSize——定义原始堆栈大小。lpStartAddress——指向使用LPTHRAED_START_ROUTINE类型定义的函数。lpParamiter——定义一个给进程传递参数的指针。dwCreationFlags——定义控制线程创建的附加标志。lpThread——保存线程标志符(32位)(2) CreateMutex功能——创建一个命名或匿名的互斥量对象格式HANDLE CreateMutex(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCTSTR lpName);参数说明lpMutexAttributes——必须取值NULL。bInitialOwner——指示当前线程是否马上拥有该互斥量(即马上加锁)。lpName——互斥量名称。(3) CreateSemaphore功能——创建一个命名或匿名的信号量对象格式HANDLE CreateSemaphore(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCTSTR lpName );参数说明lpSemaphoreAttributes——必须取值NULL。lInitialCount——信号量的初始值。该值大于0，但小于lMaximumCount指定的最大值。lMaximumCount——信号量的最大值。lpName——信号量名称。(4) WaitForSingleObject功能——使程序处于等待状态，直到信号量hHandle出现(即其值大于等于1)或超过规定的等待时间格式DWORD WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);参数说明hHandle——信号量指针。dwMilliseconds——等待的最长时间(INFINITE为无限等待)。(5) ReleaseSemaphore功能——对指定信号量加上一个指定大小的量。成功执行则返回非0值格式BOOL ReleaseSemaphore(HANDLE hSemaphore,LONG lReleaseCount,LPLONG lppreviousCount );参数说明hSemaphore——信号量指针。lReleaseCount——信号量的增量。lppreviousCount——保存信号量当前值。(6) ReleaseMutex功能——打开互斥锁，即把互斥量加1。成功调用则返回0格式BOOL ReleaseMutex(HANDLE hMutex);参数说明hMutex——互斥量指针。(7) InitializeCriticalSection功能——初始化临界区对象格式VOID InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);参数说明lpCriticalSection——指向临界区对象的指针。(8) EnterCriticalSection功能——等待指定临界区对象的所有权格式VOID enterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);参数说明lpCriticalSection——指向临界区对象的指针。(9) LeaveCriticalSection功能——释放指定临界区对象的所有权格式VOID LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);参数说明lpCriticalSection——指向临界区对象的指针。四、实验步骤（1）画出程序流程图（2）编写程序源代码// semaphore.cpp : Defines the entry point for the console application.// 共享内存实验进程之间数据的共享可以用共用内存实现，在Win32中，进程之间共享内存使用的事映射文件。虚拟内存系统具有把实际内存映射到页文件或者交换文件的能力。用户可以把内存映射到任何的映射文件中，包括系统内存页。而利用系统内存页可以实现快捷的内存共享。 利用共有内存实现进程之间的数据共享共有两部：(1) 使用CreateFileMapping函数创建内存映射文件。此函数需要文件句柄，对于大多数的内存共享应用程序，建此文件句柄设置为0xFFFFFFFF即可。这样的句柄指向系统内存页文件。HANDLE CreateFileMapping(HANDLE hFile, // 映射文件的句柄， //设为0xFFFFFFFF以创建一个进程间共享的对象LPSECURITY_ATTRIBUTES lpFileMappingAttributes, // 安全属性DWORD flProtect, // 保护方式DWORD dwMaximumSizeHigh, //对象的大小DWORD dwMaximumSizeLow,LPCTSTR lpName // 必须为映射文件命名);(2) 映射文件文件创建成功以后，以其返回的句柄作为参数，调用MapViewOfFile函数为内存映射文件对象创建视图，MapViewOfFile函数将返回指向文件的视图指针。可以利用此视图指针对内存映射文件进行操作，内存的读写简化到了就像普通变量的操作。LPVOID MapViewOfFile(HANDLE hFileMappingObject, // 为内存映射文件对象创建视图DWORD dwDesiredAccess, // 存取模式DWORD dwFileOffsetHigh, // 64位偏移地址的高32位DWORD dwFileOffsetLow, // 64位偏移地址的低32位DWORD dwNumberOfBytesToMap //映射文件大小);（1）画出程序流程图（2）编写程序源代码 Shmwrite源代码 操作系统系统接口实验1、利用DOS命令“copy”,“echo”可以在控制台（CON）上创建文本文件，并通过标准输入设备（键盘）向文件添加内容。2、普通计算机用户都可以使用Windows系统提供的“记事本”、“Word”、“写字板”等工具，直接在图形用户界面下很方便的建立并编辑文本文件。3、Windows系统提供了诸如fopen（）、fclose（）、fputc（）、fgetc（）等系统调用函数，打开并创建一个文件，并向文件添加内容，操作完成再关闭文件。1、dos命令创建文本文件a.copy con file1.txt(Enter)1234 (CTRL+Z) (Enter) b. echo 1234&gt;&gt; c:\\file2.txt(Enter) copy con c:\\123.txt(输入内容)Ctrl+Z,回车退出2、图形界面下创建文本文件 使用“记事本”、“Word”或“写字板”。3、系统调用创建文本文件 进程管理实验一、实验环境Windows 2000，VC++ 6.0。二、实验目的1、自己设计程序实现Windows系统中进程的创建、中止等操作；2、设计一个程序能显示当前Windows系统中的所有进程，及进程的进程名、进程号、父进程号、进程优先级等信息，并分析这些信息之间的关系。三、实验原理进程的创建通过CreateProcess（）函数来实现，CreateProcess（）通过创建一个新的进程及在其地址空间内运行的主线程来启动并运行一个新的程序。具体的，在执行CreateProcess（）函数时，首先由操作系统负责创建一个进程内核对象，初始化计数为1，并立即为新进程创建一块虚拟地址空间。随后将可执行文件或其他任何必要的动态链接库文件的代码和数据装载到该地址空间中。在创建主线程时，也是首先由系统负责创建一个线程内核对象，并初始化为1。最后启动主线程并执行进程的入口函数WinMain（），完成对进程和执行线程的创建。CreateProcess（）函数的原型声明如下：BOOL CreateProcess(LPCTSTR lpApplicationName, // 可执行模块名LPTSTR lpCommandLine, // 命令行字符串LPSECURITY_ATTRIBUTES lpProcessAttributes, // 进程的安全属性LPSECURITY_ATTRIBUTES lpThreadAttributes, // 线程的安全属性BOOL bInheritHandles, // 句柄继承标志DWORD dwCreationFlags, // 创建标志LPVOID lpEnvironment, // 指向新的环境块的指针LPCTSTR lpCurrentDirectory, // 指向当前目录名的指针LPSTARTUPINFO lpStartupInfo, // 指向启动信息结构的指针LPPROCESS_INFORMATION lpProcessInformation // 指向进程信息结构的指针);显示当前Windows系统中的所有进程原理，系统中有个进程链表，用来保存当前运行的所有进程的信息，程序首先调用函数CreateToolhelp32Snapshot获得进程链表的句柄，然后调用函数ProcessFirst和ProcessNext获得进程结构PROCESSENTRY32，进程的信息都包括在其中。终止一个进程，首先调用OpenProcess函数获得指定函数的句柄，然后调用函数TerminateProcess使指定进程结束。HANDLE WINAPI CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID); 功能：获得某一时刻系统中由dwFlags标识的进程、堆（heap）、模块（module）或线程的快照信息。 参数说明： dwFlags：指明返回的是哪一种快照的句柄。 Th32ProcessID：当取TH32CS_SNAPHEAPLIST和TH32CS_SNAPMODULE时才有用。 HANDLE OpenProcess(DWORD dwDesiredAccess,BOOL bInheritHandle, DWORD dwProcessId); 功能：返回指定进程的句柄。 参数说明： dwDesiredAccess：指定对指定进程的操作。 bInheritHandle：指明返回的句柄是否能被继承。 dwProcessId：指定要打开的进程的ID。 BOOL WINAPI Process32First(HANDLE hSnapshot, LPPROCESSENTRY32 lppe); 功能：获得系统进程链表中第一个进程的信息。 参数说明： hSnapshot：调用获得的CreateToolhelp32Snapshot快照句柄。 lppe：指向PROCESSENTRY32进程结构，该结构保存有该进程的相关信息。 BOOL WINAPI Process32Next(HANDLE hSnapshot, LPPROCESSENTRY32 lppe);功能：获得系统进程链表中下一个进程的信息。typedef struct tagPROCESSENTRY32{ DWORD dwSize; DWORD cntUsage; DWORD th32ProcessID; // this process DWORD th32DefaultHeapID; DWORD th32ModuleID; // associated exe DWORD cntThreads; DWORD th32ParentProcessID; // this process’s parent process LONG pcPriClassBase; // Base priority of process’s threads DWORD dwFlags; CHAR szExeFile[MAX_PATH]; // Path} PROCESSENTRY32;四、实验步骤（1）画出程序流程图（2）编写程序源代码 创建子进程 "},{"title":"优化配置jsp","date":"2021-09-21T07:47:04.000Z","url":"/2021/09/21/%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AEjsp/","tags":[["文件","/tags/%E6%96%87%E4%BB%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jsp优化ctrl+shift+r全局查找替换在html界面加page指令改jsp 抽取页面相同的内容"},{"title":"文件的上传和下载","date":"2021-09-17T12:50:31.000Z","url":"/2021/09/17/%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/","tags":[["文件","/tags/%E6%96%87%E4%BB%B6/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"文件的上传和下载文件的上传和下载时非常常见的功能,很多相同中，或者软件中经常使用文件的上传和下载比如qq头像，就使用了上传oa相同中附件材料的是个脑残 文件的上传介绍 要有一个form标签 method=post请求 form标签的encType属性值必须为multipart/form-date值 在form标签中使用input type=file添加要上传的文件 编写服务器代码接受，处理上传的数据上传http协议内容介绍 文件下载客户端浏览器发送给服务器要下载什么文件读取要下载文件的内容把下载的文件内容回传给客户端告诉客户端返回数据类型利用响应头 谷歌浏览器见上火狐浏览器base64编解码操作 "},{"title":"就业项目","date":"2021-09-15T15:57:17.000Z","url":"/2021/09/15/%E5%B0%B1%E4%B8%9A%E9%A1%B9%E7%9B%AE/","categories":[["undefined",""]]},{"title":"JSTL标签库","date":"2021-09-13T07:15:19.000Z","url":"/2021/09/13/JSTL%E6%A0%87%E7%AD%BE%E5%BA%93/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"五个不同的标签库taglib标签库引入jar包。使用taglib指令引入标签库。 core核心库使用set标签可以往库中保存数据多路判断。跟switch…case…default非常接近choose标签开始选择判断when标签标示每一种判断情况if标签用来做if判断 text属性表示判断的条件 只支持if 标签中不能使用html注释 ForEach遍历输出使用同时使用两个相同名字的包会产生冲突尽量避免命名重复 items 表示遍历的集合var 表示遍历的数据begin 表示遍历的开始end 表示结束的索引值step 表示遍历的步长值 LoopTagStatusObject getCurrent() 表示获取当前遍历到的数据int getIndex() 表示获取当前遍历的索引int getCount() 表示遍历的个数boolean isFirst() 表示当前遍历的数据是第一条或者最后一条boolean isLast() 表示当前遍历的数据是第一条或者最后一条读方法取决于方法boolean的数据生成的是读is方法Integer getBegin()Interger getEnd()Interger gerStep()获取begin end step 的属性值"},{"title":"EL表达式","date":"2021-09-13T01:14:47.000Z","url":"/2021/09/13/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"EL表达式EL 表达式的全称是：Expression Language。是表达式语言。 EL 表达式的什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。 因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁很多。 关系运算 逻辑运算 empty可以判断一个数据是否为空 三元运算表达式 1？表达式 2：表达式 3 如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值。 .和[]运算.点运算，可以输出 Bean 对象中某个属性的值。 []中括号运算，可以输出有序集合中某个元素的值。 并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值。 EL 表达式的 11 个隐含对象pageContext PageContextImpl 它可以获取 jsp 中的九大内置对象pageScope Map&lt;String,Object&gt; 它可以获取 pageContext 域中的数据requestScope Map&lt;String,Object&gt; 它可以获取 Request 域中的数据sessionScope Map&lt;String,Object&gt; 它可以获取 Session 域中的数据applicationScope Map&lt;String,Object&gt; 它可以获取 ServletContext 域中的数据param Map&lt;String,String&gt; 它可以获取请求参数的值paramValues Map&lt;String,String[]&gt; 它也可以获取请求参数的值，获取多个值的时候使用。header Map&lt;String,String&gt; 它可以获取请求头的信息headerValues Map&lt;String,String[]&gt; 它可以获取请求头的信息，它可以获取多个值的情况cookie Map&lt;String,Cookie&gt; 它可以获取当前请求的 Cookie 信息initParam Map&lt;String,String&gt; 它可以获取在 web.xml 中配置的上下文参数 EL 获取四个特定域中的属性pageScope ====== pageContext 域requestScope ====== Request 域sessionScope ====== Session 域applicationScope ====== ServletContext 域 pageContext 对象的使用 cookie获取进制队 initParam获取进制队"},{"title":"Listener监听器","date":"2021-09-12T05:16:28.000Z","url":"/2021/09/12/%E7%9B%91%E5%90%AC%E5%99%A8/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"什么是Listener监听器 LISTENER监听器是javaweb的三大组件之一，javaweb的三大组件分别是servlet程序，filter过滤器，Listener监听器 Listener是javaee的规范，就是接口 监听器的作用是，监听某种事物的变化，然后通过回调函数，反馈给客户程序ServletContextListener监听器ServletContextListener可以监听ServletContext对象的创建和销毁.ServletContext对象在web工程启动时创建，在web工程停止的时候销毁。监听到创建和销毁之后分别调用ServletContextListener监听器的方法反馈两个方法分别是 "},{"title":"jsp静态动态标签","date":"2021-09-12T02:56:37.000Z","url":"/2021/09/12/jsp%E9%9D%99%E6%80%81%E5%8A%A8%E6%80%81%E6%A0%87%E7%AD%BE/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"静态标签 动态包含 把被包含的内容执行到包含位置动态包含会把包含的jsp的页面会把包含的界面也翻译成jsp代码动态包含可以传递参数 jsp标签转发 搜索请求转发 客户端搜索 SearStudentServler程序获取发sql到数据库查询保存查询request域中 showShow.jsp遍历结果显示 回传客户端 直接访问jsp出错使用java程序正确 什么是Listener监听器 LISTENER监听器是javaweb的三大组件之一，javaweb的三大组件分别是servlet程序，filter过滤器，Listener监听器 Listener是javaee的规范，就是接口 监听器的作用是，监听某种事物的变化，然后通过回调函数，反馈给客户程序 "},{"title":"jsp对象","date":"2021-09-11T07:21:30.000Z","url":"/2021/09/11/jsp%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jsp九大内置对象jsp中的内置对象是指Tomcat在翻译jsp页面成为Servlet源代码后，内部提供第九大对象，叫内置对象 request 请求对象 response 响应对象 pageContext jsp第上下文对象 session 会话对象 application servletContext对象 config servletConfig对象 out jsp输出流对象 page 指向当且jsp的对象 exception 异常对象 四个域对象分别是pageContext(PageContextimpl类) 当前jsp范围内有效Request(HttpServletRequest类) 一次请求内有效session(HttpSession类) 一个会话范围内有效(打开浏览器访问服务器，直到关闭浏览器)application(ServletContext类) 整个web功能范围内都有效（只要web工程不停止）域对象是可以像map一样存取数据的对象，四个域对象功能一样，不同的是他们对象数据的存取范围 四个域在使用时优先顺序时，他们从大到小的范围顺序pageContext-&gt;request-&gt;session-&gt;application减轻内存压力，优化 out和response.getWriter输出的区域response输出输出在jsp文件的最前面 两个输出流，各自都有自己的缓冲区out缓存区和response缓冲区当jsp页面中所有代码执行完毕后会做以下两个操作 会执行out.flush操作，会把out缓冲区的数据追加写入到response缓冲区末尾 会执行response的刷新操作。把全部数据写给客户端由于jsp翻译之后，底层源代码是out来输出，所以一般情况下，我们在jsp界面中统一使用out输出 "},{"title":"jsp回传","date":"2021-09-09T14:55:12.000Z","url":"/2021/09/09/jsp%E5%9B%9E%E4%BC%A0/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jsp的page指令可以修改jsp页面中一些重要的属性，或者行为我们跟踪源代码发现，HttpjspBase类，他直接继承了Httpservlet类通过java程序回传jsp language 属性 翻译后是什么语言 暂时只支持java contentType 属性 表示返回的类型是什么，也是源码中response.setContentType参数值 pageEncoding 属性 文件本身的字符集 import 属性 跟java源代码一样用于导包导类两个属性给out输出流 autoFlush 属性 设置当out输出流满了之后，是否自动刷新缓冲 一般是true buffer 属性 缓冲区 缓冲区大小设置 超过后报错 8kb是性能综合优两个属性给out输出流 errorPage 属性 设置jsp页面运行出错，自动跳转的错误页面路径 映射到代码的web目录 isErrorPage设置当前jsp页面是否是错误信息页面，默认是false 如果是true可以获取异常信息 异常对象得到异常信息 session 属性 设置当前访问jsp页面是否创建http对象 extends 属性 继承设置jsp翻译的类默认继承谁 表达式脚本&lt;%! 表达式脚本的作用是在jsp界面上输出数据%&gt; 特点 所有的表达式脚本都会被翻译到_jspService方法中 表达式脚本都会被翻译成out.print()输出到界面上 由于表达式脚本翻译的内容都在_jspService方法中所以方法中的对象均可适用 表达式脚本中的表达式不能以分号结尾 代码脚本代码脚本的格式是： 代码脚本的作用是可以在jsp页面中编写自己需要的功能(写的是java语句)相当于在jsp界面中写java类翻译到_jsoService方法中 特点 代码脚本翻译后都在_jspServlet方法中 代码由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用 还可以由多个代码脚本块组合完成一个完整的java语句(可以写在两个块里面) 代码脚本可以和表达式脚本一起组合使用&lt;%=%&gt;和&lt;%%&gt;快捷键创建变量快捷键ctrl+alt+v "},{"title":"html回传","date":"2021-09-08T07:58:07.000Z","url":"/2021/09/08/html%E5%9B%9E%E4%BC%A0/","tags":[["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"html回传"},{"title":"jsp详写","date":"2021-09-07T13:23:08.000Z","url":"/2021/09/07/jsp%E8%AF%A6%E5%86%99/","tags":[["jsp","/tags/jsp/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jspjsp 的全称是java server pages java的服务器页面 jsp的主要作用是代替Servler程序回传html界面的数据 因为Servler程序回传html页面数据是一件非常繁琐的事情，开发成本和维护成本都非常高。 脚本声明脚本的格式是 作用：可以给jsp翻译出来的java类定义属性和方法甚至是静态代码块，内部类 jsp注释html注释会被翻译到java源代码中。在_jspService方法里，以out.writer输出到客户端java注释会被翻译到java源代码中。jsp注释&lt;%—-%&gt;可以注释可以注掉jsp界面所有代码"},{"title":"web层交互数据库","date":"2021-09-06T11:45:35.000Z","url":"/2021/09/06/web%E5%B1%82%E4%BA%A4%E4%BA%92%E6%95%B0%E6%8D%AE%E5%BA%93/","tags":[["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"注册代码 RegistServlet.java 登录代码 LoginServlet.java"},{"title":"数据库连接层","date":"2021-09-05T07:45:37.000Z","url":"/2021/09/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%B1%82/","tags":[["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jdbcutil.java JdbcutilTest.java 测试类 Basedao.java User.java UserDaoImpl.java UserDao.interface 注释 UserDaoTest 主键记得设置递增1.RegistServlet程序接受注册请求2.检测验证码是否正确html不加name无法传递参数"},{"title":"java开发实战(第二十九天)","date":"2021-08-31T19:25:31.000Z","url":"/2021/09/01/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E5%A4%A9)/","tags":[["java","/tags/java/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"javaee项目的三层架构web层控制层1.获取请求参数，封装成为Bean对象2.调用Service层处理业务3.响应数据给客户端请求转发重定向servlet程序webworkstrtus1.xstrtus2.xspringmvc service业务层1.处理业务逻辑2.调用持久层保存到数据库spring框架 dao 持久层和数据库的交互sql语言jdbcdbutilejdbctemplatemybatishiberantejpa 分层的目的是为了解耦。解耦就是为了降低代码的耦合度。方便项目后期的维护和升级 webcom.atguigu.web/servlet/controller serviceservice com.atguigu.service service接口包service com.atguigu.service.impl service接口实现类 daocom.atguigu.dao Dao接口包com.atguigu.dao.impl Dao接口实现类 实体bean对象com.atguigu.pojo/entity/dpmain/bean#"},{"title":"java开发实战(第三十天)","date":"2021-08-31T19:25:31.000Z","url":"/2021/09/01/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%B8%89%E5%8D%81%E5%A4%A9)/","tags":[["数据库","/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"数据库数据库实体的抽象编写对应的数据库表编写pojo程序 层次不同层次有不同的包web层com.white.web/servlet/controllerservice册com.white.service service接口包com.white.service.impl service接口实现类dao持久层com.white.dao Dao接口包com.white.dao.impl Dao接口包实体bean对象com.white.pojo/entity/domain/bean javabear类测试包com.white.text/junit工具类com.white.utils"},{"title":"java开发实战(第二十八天)","date":"2021-08-31T05:54:27.000Z","url":"/2021/08/31/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E5%A4%A9)/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"微信服务器维护日志 开发httpServletResponsehttpservletrequest表示请求过来的信息，httpservletResponse表示响应的信息如果需要返回给客户端信息，都可以通过HttpservletResponse对象进行设置 两个输出流的说明字节流 getOutputStream() 常用于下载字符流 getWiter() 常用于回传字符串（常用）两个流只能同时使用一个，反之报错 请求重定向客户端给服务端发请求，然后服务器告诉客户端说，我给一些新地址，访问新地址，请求重定向响应码302已搬迁 特点1.地址栏会发生变化2.两次请求3.不共享域中的数据4.不能访问web-inf下的资源"},{"title":"java开发实战(第二十七天)","date":"2021-08-30T02:40:46.000Z","url":"/2021/08/30/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E5%A4%A9)%20/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"],["HTTP","/tags/HTTP/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"subit提交无法获取script资源定位 报文无法提交输入的数据？（代解决）（已解决）通过js值修改隐藏域使得报文正常提交chrome HttpServletRequest类每次只要有请求进入Tomcat服务器，Tomcat服务器就会把请求和发过来的http协议封装好到request请求中，然后传递到service方法（doget和dopost请求中）每次请求创建一个请求完销毁 getRequestURI() 获取请求的资源路径getRequestURL() 获取请求的统一资源定位符(绝对路径)getRequestHost() 获取客户端的ip地址getHeader() 获取请求头getParameter() 获取请求参数getParameterValues() 获取请求的参数(多个值的时候使用)getMethod() 获取请求的方式get或postsetAttribute(key,value) 设置域数据getAttribute(key) 获取域数据getRequestDispatcher() 获取请求转发对象 获取客户端的参数准备表单 请求转发servlet1到servlet2"},{"title":"java开发实战(第二十六天)","date":"2021-08-29T06:15:54.000Z","url":"/2021/08/29/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AD%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"],["HTTP","/tags/HTTP/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"ServletContext补充c盘C:\\Users\\11\\AppData\\Local\\JetBrains\\IntelliJIdea2020.1\\tomcat\\Tomcat_8_5_69_jsp 将d盘的工程引用部署记得创建servlet时不打勾否则会部署时报错 ServletContext是在web工程部署启动时创建，在web工程停止时销毁System.out.println(“Context1 中获取到的key1的值是：”+context.getAttribute(“key1”));只要有对象随时都能重取访问2-1-2 会出现如下效果Context1 中获取到的key1的值是：nullContext1 中获取到的key1的值是：value1Context1 中获取到的key1的值是：value1 HTTP客户端和服务端通讯时遵守的规则是http协议http中的数据叫做报文 Accept：告诉服务器，客户端可以接受的数据类型text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Language：告诉服务器客户端可以接收的语音类型zh-CN,zh;q=0.9zh_CN 中文中国en_US 英文美国 User-Agent:用户代理（浏览器代理 浏览器信息）Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Accept-Encoding：告诉服务器，客户端可以接收的数据（数据编码压缩格式）gzip, deflate, br host：主机表示请求的服务器和ip端口号localhost:8080 Connection：告诉服务器请求连接如何处理 Keep-Alive 告诉服务器回传数据不要马上关闭，保持一小段时间的连接 timeout=20 Closed 马上关闭 get请求1.请求行(1)请求的方式 get(2)请求的资源路径(+?+请求参数)(3)请求的版本号 http1.12.请求头 post请求1.请求行(1)请求的方式 post(2)请求的资源路径(+?+请求参数)(3)请求的版本号 http1.12.请求头(1)key :value 不同的请求行3.请求体发送给服务器的数据"},{"title":"java开发实战(第二十五天)","date":"2021-08-28T14:54:58.000Z","url":"/2021/08/28/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"HttpServlet导入源码servlet里面都是tomcat源码serveltGenericServlet类实现了Servlet接口，做了很多空实现并有一个ServletConfig类引用，ServletConfig的使用在做一些方法 HttpServlet抽象类实现了重要的抽象的方法，实现了请求的分发处理人家已经写好的更具业务需求重写douget和dopost方法就行 ServletConfig都是由tomcat创建使用，是每个servlet创建后就生成的1.可以获取servlet重新发别名servlet-name的值2.获取初始化参数init-param3.获取servletContext对象可以写多个java文件通过不同的访问获取不同servletconfig属性 父类的保存操作就会丢失 ServletContext类什么是servletContext1.是一个接口，表示servlet上下文对象2.一个web工程，只有一个servletContext对象实例 什么是域对象可以像mao一样存取时间的对象，叫做域对象这里的域对象是操作范围"},{"title":"java开发实战(第二十四天)","date":"2021-08-27T14:04:20.000Z","url":"/2021/08/27/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"server1.编写一个类去继承httpServlet类2.根据业务需要重写doget或者dopost方法3.到web.xml配置servlet程序访问地址 实际业务需求中新建文件重写doget和dopost 写好以后去配置访问地址‘直接newservlet interface servlet 实现接口↑class cenericservlet 继承↑class httpservlet 继承↑自定义的servlet程序"},{"title":"java开发实战(第二十三天)","date":"2021-08-26T03:22:41.000Z","url":"/2021/08/26/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"servlet servlet是javaee规范之一 规范就是接口 servlet就是javaweb三大组件之一 分别是servlet程序 fiter过滤器 listener监听器 servlet是运行在服务器上的java小程序 他可以接受客户端发来的请求 并且相应数据给客户端 配置接口函数编写一个类去实现servlet接口实现sevice方法，处理请求，并相应数据到web.xml中配置servlet程序的访问地址alt+insert +implemen 自动生成src目录下的com.atguihu.com 配置访问路径然后到web-inf中的web.xml配置自动补全代码关掉省电模式即可web.xml java底层和网络接收客户端和服务端tcp udp类似在访问/hello java控制台返回java代码第一个service被访问 约定大于配置"},{"title":"java开发实战(第二十二天)","date":"2021-08-25T03:39:36.000Z","url":"/2021/08/25/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"Tomcat目录bin 可执行程序conf 配置文件logs 日志信息lib jar包temp 零时数据webapps web工程 Tomcat默认端口8080修改方式 conf目录 server.xml配置文件找到修改port1-65535 1000以内系统 8000以外 修改完端口要重启tomacat 应用部署方式1.直接放到webapps 2.bin目录下的localhost文件内 默认访问root/index.jsp idea开发一般在idea完成之后在web目录创建lib目录用来存放第三方的jar包还需要自己配置导入 web文件专门用来存放web工程比如html css js web - inf 受服务器保护的目录，浏览器无法直接访问改目录 web.xml 它是整个动态web工程的配置部署描述文件可以自这些配置很多web工程组件servlet程序Filter过滤器Listener监听器session超时…等等 添加第三方架包将jar包导入lib里面然后 add as library 使用最后一个module library idea导入lib架包 代码补全方法输入特定字符然后Tab补全需要按alt+/自动提示ctrl+/注释idea的快捷键非常智能需要长时间的熟悉 移除依赖file projectstructure dependencies 减号移除依赖"},{"title":"java开发实战(第二十一天)","date":"2021-08-24T02:48:20.000Z","url":"/2021/08/24/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9)/","tags":[["Tomcat","/tags/Tomcat/"],["servlet","/tags/servlet/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"第二阶段XMlxml解析器 dom 和sax技术Document目录根java甲骨文java sun vsc 无法使用的原因是架包关系无法在lib中导入架包 如果拥有合适插件应该可以进行使用 tomcatjavaweb 所有通过java语言编写的可以通过浏览器访问的程序总称javaweb 是基于请求和相应来开发的 请求和响应完整的javaweb客户端有请求就有响应 web资源的分类静态资源 html css js txt mp4 jpg 动态资源 jsp servlet 常用的服务器Tomcat javaweb容器 市面最多jboss javaee规范glassfish 甲骨文的javaweb服务器 收费resin caucho收费weblogic 目前应用最广泛 收费 tomcat不同版本和servlet对应关系"},{"title":"java开发实战(第二十天)","date":"2021-08-23T07:26:39.000Z","url":"/2021/08/23/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"项目构思背景当今主流媒体从传统的广播报纸过度到如今的新媒体平台可对人员和平台流量贡献进行统计分析大学生社团 学生会 管理 第一阶段表单验证8.2319:50已完成经验总结缺乏实战应该勤加练习验证界面完成"},{"title":"java开发实战(第十九天)","date":"2021-08-22T12:02:28.000Z","url":"/2021/08/22/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["undefined",""]],"content":"jquery 事件操作1.jquery的页面加载完成之后是浏览器的内核解析完页面的标签创建好Dom对象之后会马上执行2.原生js的页面加载完成 之后，处理要等浏览器内核解析完标签创建好dom对象，还要等标签显示时需要的内容加载完成3.原生js只执行最后一次4.jquery依次执行触发 事件 事件冒泡 图片跟随"},{"title":"java开发实战(第十八天)","date":"2021-08-21T05:24:28.000Z","url":"/2021/08/21/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["undefined",""]],"content":"divEle"},{"title":"java开发实战(第十七天)","date":"2021-08-20T05:24:13.000Z","url":"/2021/08/20/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["undefined",""]],"content":"css动画 精选"},{"title":"java开发实战(第十六天)","date":"2021-08-19T13:34:42.000Z","url":"/2021/08/19/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9)/","tags":[["咕咕咕","/tags/%E5%92%95%E5%92%95%E5%92%95/"],["JAVASCRIPT","/tags/JAVASCRIPT/"]],"categories":[["小项目","/categories/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"]],"content":"休息水排序小游戏 补表单添加"},{"title":"java开发实战(第十五天)","date":"2021-08-17T17:46:19.000Z","url":"/2021/08/18/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9)/","tags":[["jquery","/tags/jquery/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"jquery方法attr() 获取，修改获取的设置 不推荐操作checked,readOnly,selected,disabled 等等attr方法还可以操作非标准属性 abcprop() 获取，修改获取的设置 ,只推荐上面不推荐操作的方法 dom的增删改查内部插入appendto() a.appendTo()把a插入到b子元素末尾 成为最后一个子元素prependTo() a.prependTo()把a插到b所有元素前面，成为第一个子元素 外部插入inserAfter() a.inserAfter(b) 得到bainserBefore() b.inserBefore(b) 得到ab 要加的东西是a 替换replaceWith() a.replaceWhith(b) 用b替换掉areplaceAll() a.replaceAll(b) 用b替换掉所有的a 删除remove() a.remove() 删除a标签empty() a.empty() 清空a标签里的内容 操作"},{"title":"live2d恢复","date":"2021-08-17T15:51:15.000Z","url":"/2021/08/17/live2d/","tags":[["测试","/tags/%E6%B5%8B%E8%AF%95/"]],"categories":[["undefined",""]],"content":"footer.ejs文件加入导航栏底层即可 更改在theme文件，css和footer.ejs中"},{"title":"java开发实战(第十四天)","date":"2021-08-17T03:58:20.000Z","url":"/2021/08/17/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9)/","tags":[["jquery","/tags/jquery/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"jquery选择器js文件,引入使用 $(document).ready() 的简写，同时内部的 jQuery 代码依然使用 $ 作为别名，而不管全局的 $ 为何。$(function($) {// 你可以在这里继续使用$作为别名…}); 运动js jquery 属性操作html() 它可以设置和获取起始标签和结束标签中的内容。跟dom属性的innerHTML一样text() 它可以设置和获取起始标签和结束标签的文本。跟dom属性的innerText一样val() 他可以设置和获取[表单项]的value值。跟dom属性的value一样 可以同时设置多个表单项的值 "},{"title":"java开发实战(第十三天)","date":"2021-08-16T10:41:32.000Z","url":"/2021/08/16/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9)/","tags":[["jquery","/tags/jquery/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"jqueryn内容在文档目录下创建一个script文件夹里面放上jquert-1.7.2.js文件引入jquert目录 $是一个函数window.jQuery = window.$ = jQuery; jquery 核心函数//核心函数的4个作用 $(function () { // alert(“页面加载完成之后，自动调用”); jquery和dom对象区分通过jQuery提供的api创建的对象，是jquery对象通过jquery包装的dom对象也是jquery对象通过jquery提供的api查询到的对象，是jquery对象alert 为 [object] [object] document.getElementById(“testDiv”).innerHTML = “这是dom对象的属性InnerHTML”; //可以使用$(“#testDiv”).innerHTML = “这是dom对象的属性InnerHTML”; //dom对象的使用不了jquery对象不能使用dom对象的属性和方法dom对象不能使用jquery的属性和方法 jquery本质jquery是dom对象的数组+jquery提供的一系列函数 dom对象和jquery对象互转dom对象转jquery对象1.先有dom对象2.$(dom对象)就可以转换成jquery对象var $obj = $(dom)对象 jquery对象转dom对象1.先有jquery对象2.jquery对象下标取出相应的dom对象var dom = $obj[下标]"},{"title":"java开发实战(第十二天)","date":"2021-08-15T06:08:54.000Z","url":"/2021/08/15/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9)/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"linux kali物理机安装使用uiso9_cn给u盘刻录设置主板首选项驱动为u盘 物理机安装记得选择图形化界面linux 环境监测java java -versionc语言 gcc –versionpython python c编译创建first.c文件g++ first.cpp -o first 编译./first.out 执行 java编译yum install java-devel 安装javacjavac +文件名java +类名无后缀 win sshssh -p 22 &#x72;&#x6f;&#111;&#x74;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#x38;&#46;&#x31;&#46;&#49;&#x30;&#x31; lscpu命令能够查看 CPU 和处理单元的信息。该命令没有任何其他选项或者别的功能。 lspci是另一个命令行工具，可以用来列出所有的 PCI 总线，还有与 PCI 总线相连的设备的详细信息，比如 VGA 适配器、显卡、网络适配器、usb 端口、SATA 控制器等。 lshw是一个通用的工具，可以列出多种硬件单元的详细或者概要的信息，比如 CPU、内存、usb 控制器、硬盘等。lshw能够从各个“/proc”文件中提取出相关的信息。 lsscsi通过运行下面的命令可以列出像硬盘和光驱等 scsi/sata 设备的信息： lsusblsusb命令能够列出 USB 控制器和与 USB 控制器相连的设备的详细信息。默认情况下，lsusb命令只打印出概要信息。可以通过使用-v参数打印每一个usb端口的详细信息。 dfdf命令能够列出不同分区的概要信息、挂载点、已用的和可用的空间。可以在使用df命令的时候加上-H参数。 free命令通过使用free命令可以查看系统中使用的、闲置的和 RAM 的总体数量。随机存取存储器（英语：Random Access Memory，缩写：RAM），也叫主存，是与CPU直接交换数据的内部存储器。它可以随时读写（刷新时除外），而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储介质。RAM工作时可以随时从任何一个指定的地址写入（存入）或读出（取出）信息。它与ROM的最大区别是数据的易失性，即一旦断电所存储的数据将随之丢失。RAM在计算机和数字系统中用来暂时存储程序、数据和中间结果。"},{"title":"java开发实战(第十一天)","date":"2021-08-14T15:16:02.000Z","url":"/2021/08/14/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["git","/tags/git/"],["jquery","/tags/jquery/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"jquery 介绍 jquery hellp world jquery 选择器 jquery 过滤器 jquery 元素删选什么是jqueryjavascript和查询(query),辅助javascript开发的js类库。核心思想write less，do more(写的更少，做的更多) git规则更新断更日记今天提交代码，push到GitHub上，突然出现这个问题。 remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead. remote: Please see  for more information. fatal: unable to access ‘;: The requested URL returned error: 403 git config –global –listgit config –global user.name “yourname”git config –global user.emailssh-keygen -t rsa -C “这里换上你的邮箱”会在/Users/***/路径下生成一个.ssh文件夹，密钥就存储在其中到git仓库，添加秘钥，点击Add SSH keyssh -T &#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d; 测试一下通不通，通了显示hi 设置好以后相比于令牌更快但安全保证度不高"},{"title":"java开发实战(第十天)","date":"2021-08-12T16:53:46.000Z","url":"/2021/08/13/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%8D%81%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"],["javascript","/tags/javascript/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"源码"},{"title":"java开发实战(第九天)","date":"2021-08-12T15:56:17.000Z","url":"/2021/08/12/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%B9%9D%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"],["javascript","/tags/javascript/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"正则表达式字符串的检测对象var patt =/^\\w{5,12}$/在5-12个长度RegExp(“e”)存在一个/e/同上reg/[abcd]/字符串中包含任意一个/[^abcd]/字符串中没有任意一个/[a-z]/字符串是否包含小写字母/[A-Z]/字符串是否包含大写字母/[0-9]/是否包含任意数字 元字符/\\w/查找单词字符 //使用最多是否包含字母数字下划线/\\d/查找数字/\\s/查找空白字符 量词/n+/必配包含至少一个n/n*/必配包含 零 或 多个n/n?/必配包含 零 或 一个n/n{3}/连续的三个n/n{1,5}/最多5个至少1个连续的n //最大什么时候有用/n{3,}/最少三个/a$/必须以a结尾/^a/以a打头/^n{1,5}$/要求从头到尾完全匹配 //最长用的 dom代码document 优先id 然后name 最后tagname以上三个方法一定要在页面加载完成后才可以进行从上到下执行 dom查询节点节点就是标签对象getElementsByTagname()方法，获取当前节点的指定标签名孩子节点appendChild(oChildNode)方法，可以添加一个子节点，oChildNode是要添加的孩子节点innerHTML找到并显示修改 属性chileNodes属性 获取当前节点的所有子节点firstChile属性 获取当前子节点的第一个子节点lastChile属性 获取当前子节点的最后一个子节点parentNode属性 获取当前子节点的父节点nextSibling属性 获取当前子节点的下一个节点previous属性 获取当前子节点的上一个节点className用于获取或标签的class属性值innerHtml属性 表示获取/设置起始标签和结束标签中的内容 都有innerText属性 表示获取/设置起始标签和结束标签中的文本 文字测试源码"},{"title":"java开发实战(第八天)","date":"2021-08-11T16:32:05.000Z","url":"/2021/08/12/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%85%AB%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"],["javascript","/tags/javascript/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"DOM模型DOM全称是Document Object Model 文档对象模型把文档中的标签，属性，文本，转换成为对象来管理。 标签对象化用一个类记录标签的所有消息 document对象中的方法介绍 输入校验"},{"title":"java开发实战(第七天)","date":"2021-08-11T01:36:35.000Z","url":"/2021/08/11/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%B8%83%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["java","/tags/java/"],["HTML","/tags/HTML/"],["javascript","/tags/javascript/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"JS的事件事件是电脑输入设备与页面进行交互的相应，我们称之为事件 常用的事件onload 加载完成事件; 页面加载完成后,常用于做页面js代码初始化操作onclick 单击事件; 常用于按钮的点击响应操作onblur 失去焦点事件 常用于输入框失去焦点后验证其输入内容是否合法onchange 内容发生改变事件 常用于下拉列表和输入框内容发生改变后操作onsubmit 表单提交事件 常用于表单提交前,验证所有表单项是否合法 事件注册（绑定）执行代码事件响应后要执行那些代码 静态注册通过html标签的事件属性直接赋予事件响应后的代码 动态注册先通过js代码得到标签的dom对象，然后通过dom对象.事件名=function(){} 这种形式赋予事件 获取标签对象 标签对象.事件名 = function(){}html JS "},{"title":"js小样式","date":"2021-08-10T12:53:31.000Z","url":"/2021/08/10/js%E5%B0%8F%E6%A0%B7%E5%BC%8F/","tags":[["HTML","/tags/HTML/"]],"categories":[["小项目","/categories/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"]],"content":"html,JS源码 项目连接: 七夕表白项目连接: 母亲节礼物"},{"title":"java开发实战(第六天)","date":"2021-08-10T02:26:18.000Z","url":"/2021/08/10/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%85%AD%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"],["javascript","/tags/javascript/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"JAVASCRIPT特点 交互性 安全性 跨平台性js是弱类型 java是强类型变量 特殊值 关系运算 逻辑运算在javascript，所有的变量可以当做弱变量使用 html js逻辑基础 函数 js自定义对象object形式的自定义对象对象的定义:var 变量名 = new object();//对象实例(空对象)变量名.属性名=值; //定义一个属性变量名.函数名=function(){}//定义一个函数对象的访问:变量名.属性 //函数名(); 大括号形函数 "},{"title":"java开发实战(第五天)","date":"2021-08-08T16:32:52.000Z","url":"/2021/08/09/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%94%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"html css"},{"title":"java开发实战(第四天)","date":"2021-08-08T04:03:36.000Z","url":"/2021/08/08/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E5%9B%9B%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"html表格表单(vsc)html语言直接打标签 会自动生成标签格式 表单请求发送给服务器数据没有发送到服务器的三种情况method post和get 字符大的话用postpost 安全隐藏属性值 没有注name标签加上对应标签以后 单选复选 option 标签 没有添加value 表单项目不在form标签中 "},{"title":"java开发实战(第三天)","date":"2021-08-07T10:04:39.000Z","url":"/2021/08/07/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%B8%89%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["HTML","/tags/HTML/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"有关vscode&amp;tomcat编程vscode缩进快捷键：选中文本；Ctrl+[ 和Ctrl+] 实现文本的向左移动或者向右移动；vscode代码对齐快捷键：选中文本；Shift + Alt + F 实现代码的对齐； html书写 在webapp创建一个新文件html。html和htm没有区别 切换语言html ！自动生成html文件代码 标准html "},{"title":"java开发实战(第二天)","date":"2021-08-06T12:10:43.000Z","url":"/2021/08/06/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%BA%8C%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"端口占用问题win10 netstat -ano | findstr 8080 指令的意思是找出占用8080端口的进程pid此时发现8080端口号的pid是11441（pid是会变化的）再次输入指令：taskkill -pid 11441 -f，回车 linux找到端口对应的进程的pid, 比如找到的PID是17413：netstat -anp |grep 8080kill -9 PID 17413 tomcat 配置问题 tomcat官网开启后访问自己的ip+:8080 start.bat 闪退pause加到start.bat末尾 start.bat 乱码setclasspath.bat 环境变量配置在解压后的tomcat的conf文件夹下找到logging.properties文件,将java.util.logging.ConsoleHandler.encoding = UTF-8中的UTF-8修改为GBK。 vscode加载tomcat下载 tomcat for java 插件 在tomcat servers中添加tomcat文件目录C:\\Users\\11\\AppData\\Roaming\\Code\\User\\settings.json修改java.home为“java.home”: “C:\\Progra~1\\Java\\jdk-11.0.10”,即可正常使用 启动报错问题警告: 基于APR的本地库加载失败.错误报告为[no tcnative-1 in java.library.path: 找到Tomcat中bin目录下的 tcnative-1.dll 文件 将该文件拷贝到 C:\\Windows\\System32 这个目录下重启Tomcat，就不会报错了。我亲自试验的，是没问题。局域网无法访问 防火墙新建规则8080 tcp 安全访问 web.xml中修改 端口修改问题conf文件中查找8080tomcat 部署问题 将文件复制到webapps目录下 刷新服务器即可找到对应的web 在新建-1上部署不要动原文件 "},{"title":"java开发实战(第一天)","date":"2021-08-05T10:42:25.000Z","url":"/2021/08/05/java%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98(%E7%AC%AC%E4%B8%80%E5%A4%A9)/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["java","/tags/java/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"web项目层次控制层（controller）的职能是负责读取视图表现层的数据，控制用户的输入，并调用业务层的方法；业务层（service）需要根据系统的实际业务需求进行逻辑代码的编写，有些业务逻辑需要通过与数据库交互的，则业务逻辑层需要调用数据访问层的相关方法实现与数据库的交互，对于一些不需要与数据库进行交互的，则直接编写业务代码，将执行结果反馈给控制层即可；数据访问层（dao）只负责与数据库的数据交互，将数据进行存储读取操作 工具前后端开发工具idea，测试工具selenium，代码管理工具Git，后端开发语言java，前端HTML，JS,angelarjs,eChars,jQuery,CSS;数据库MySQL,可试工具Sqlyong;后台框架Springboot+Mybatis"},{"title":"win和linux操作系统环境变量","date":"2021-08-04T13:11:59.000Z","url":"/2021/08/04/win%E5%92%8Clinux%E5%90%AF%E5%8A%A8%E6%8C%87%E4%BB%A4/","tags":[["linux","/tags/linux/"],["win","/tags/win/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"win后缀为bat的文件，双击后即可运行其中的程序可以快捷方式复制到桌面在电脑无法正常打开时，shift+f10改注册表 linux后缀为.sh的文件，在终端即可直接执行ln [文件] [目录] 为创建快捷方式 环境变量系统环境变量系统环境变量，顾名思义，他是系统的。也就是说一旦配置了系统环境变量后，只要是使用这个操作系统的人，不管任何用户（一个操作系统一般可以设置多个用户）都能通过这个环境变量直接在doc命令窗口直接找到相应程序 用户环境变量用户环境变量，顾名思义，他是独属于某个用户的，一般那个用户配置的它，它就是那个用户的。也只有配置这个环境变量的用户才能使用它 win环境变量 linux环境变量"},{"title":"攻击记录","date":"2021-08-03T11:10:17.000Z","url":"/2021/08/03/%E6%94%BB%E5%87%BB%E8%AE%B0%E5%BD%95/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["网络","/tags/%E7%BD%91%E7%BB%9C/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"信息收集ip203.208.43.0-255202.200.158.141202.200.159.0-255&#x68;&#x75;&#110;&#x74;&#x65;&#x72;&#46;&#122;&#64;&#50;&#x36;&#51;&#x2e;&#110;&#101;&#x74;&#119;&#x65;&#x62;&#x40;&#120;&#x61;&#117;&#x61;&#116;&#x2e;&#x65;&#100;&#x75;&#x2e;&#99;&#x6e;"},{"title":"about you","date":"2021-08-02T15:38:09.000Z","url":"/2021/08/02/about%20you/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"kong有人常说 百度能解决你大多数的问题但是有时候，真的没办法解决你所有的问题我有时候仔细，但有时候也马虎但是有些关于你的问题，我都会会感情用事，我明知不可能但是我还愿意为之这是我最后的倔强这是我的底线如果你看到了这篇博客，我只能说我心里还有你但不是喜欢你我想了却自己的心愿我想以你为目标向前继续努力我想陪你白酒二斤半我想陪你喝啤酒随便灌"},{"title":"信息收集指端口扫描","date":"2021-08-01T17:41:56.000Z","url":"/2021/08/02/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%8C%87%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["网络","/tags/%E7%BD%91%E7%BB%9C/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"nmap命令对指定ip进行端口扫描nmap -p[端口]-[端口] [ip] linux kali环境下端口范围 1-65535 nmap命令常见端口服务默认端口公认端口(Well Known Ports)：0-1023，他们紧密绑定了一些服务；注册端口(Registered Ports)：1024-49151，他们松散的绑定了一些服务；动态/私有：49152-65535，不为服务分配这些端口； 自身维护扫描后可以设置过滤在防火墙高级设置中添加入栈规则放止漏洞被利用 实战测试便于查询ctrl+f 输入端口查询 文件共享服务端口渗透ftp服务FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等； 默认端口：20（数据端口）；21（控制端口）；69（tftp小型文件传输协议） 攻击方式： 爆破：ftp的爆破工具有很多，这里我推荐owasp的Bruter以及msf中ftp爆破模块； 匿名访问：用户名：anonymous 密码：为空或任意邮箱 用户名：FTP 密码：FTP或为空 用户名：USET 密码：pass 当然还有不需要用户名密码直接访问的，一般出现在局域网中； 嗅探：ftp使用明文传输技术（但是嗅探给予局域网并需要欺骗或监听网关） 后门技术：在linux的vsftp某一版本中，存在着一个后门程序，只要在用户名后面加上 就会在6200上打开一个监听Shell，我们可以使用telnet直接连接；详细请点击 远程溢出漏洞：6.10.1 IIS FTP远程溢出漏洞，在IIS FTP服务器中NLST命令存在一个缓冲区溢出漏洞，这个漏洞可能是攻击者在服务器运行一条非法命令。 跳转攻击：（Bounce Attacks）攻击者发送一个FTP”PORT”命令给目标FTP服务器，其中包含该主机的网络地址和被攻击的服务的端口号。这样，客户端就能命令FTP服务器发一个文件给被攻击的服务。这个文件可能包括根被攻击的服务有关的命令（如SMTP,NNTP等）。由于是命令第三方去连接到一种服务，而不是直接连接，就使得跟踪攻击者变得困难，并且还避开了基于网络地址的访问限制。（注：此种情况小白并没有遇到过，只是总结一下，欢迎大牛指教） NFS服务nfs：网络文件系统，允许网络中的计算机通过TCP/IP网络共享资源。基于Linux系统，配置方面很简单，详细配置请参考案例分享。在nfs配置中，有不做任何限制的，有限制用户，有限制IP，以及在版本2.x中我们还可以使用证书来验证用户。当然不同的限制可以采用的攻击方式也不一样；就目前而言网上关于nfs的攻击还是比较少的! 默认端口：2049 攻击方式： 未授权访问：未限制IP以及用户权限设置错误 Samba服务Samba服务：对于这个可以在windows与Linux之间进行共享文件的服务同样是我们攻击的关注点；samba登录分为两种方式，一种是需要用户名口令；另一种是不需要用户名口令。在很多时候不光是pc机，还有一些服务器，网络设备都开放着此服务，方便进行文件共享，但是同时也给攻击者提供了便利。 默认端口：137（主要用户NetBIOS Name Service；NetBIOS名称服务）、139（NetBIOS Session Service，主要提供samba服务） 攻击方式： 爆破：弱口令（爆破工具采用hydra）hydra -l username -PPassFile IP smb 未授权访问：给予public用户高权限 远程代码执行漏洞：CVE-2015-0240等等 LDAP协议ldap：轻量级目录访问协议，最近几年随着ldap的广泛使用被发现的漏洞也越来越多。但是毕竟主流的攻击方式仍旧是那些，比如注入，未授权等等；这些问题的出现也都是因为配置不当而造成的。 默认端口：389 攻击方式： 注入攻击：盲注 未授权访问： 爆破：弱口令 远程连接服务端口渗透SSH服务SSH服务：这个服务基本会出现在我们的Linux服务器，网络设备，安全设备等设备上，而且很多时候这个服务的配置都是默认的；对于SSH服务我们可能使用爆破攻击方式较多。 默认端口：22 攻击方式 爆破：弱口令、 漏洞：28退格漏洞、OpenSSL漏洞 Telnet服务Telnet服务：在SSH服务崛起的今天我们已经很难见到使用telnet的服务器，但是在很多设备上同样还是有这个服务的；比如cisco、华三，深信服等厂商的设备；我就有很多次通过telnet弱口令控制这些设备； 默认端口：23 攻击方式 爆破：弱口令 嗅探：此种情况一般发生在局域网； Windows远程连接远程桌面连接：作为windows上进行远程连接的端口，很多时候我们在得到系统为windows的shell的时候我们总是希望可以登录3389实际操作对方电脑；这个时候我们一般的情况分为两种。一种是内网，需要先将目标机3389端口反弹到外网；另一种就是外网，我们可以直接访问；当然这两种情况我们利用起来可能需要很苛刻的条件，比如找到登录密码等等； 默认端口：3389 攻击方式： 爆破：3389端口爆破工具就有点多了 Shift粘滞键后门：5次shift后门 3389漏洞攻击：利用ms12-020攻击3389端口，导致服务器关机；请参考 VNC服务VNC：一款优秀的远控工具，常用语类UNIX系统上，简单功能强大；也 默认端口：5900+桌面ID（5901；5902） 攻击方式： 爆破：弱口令 认证口令绕过： 拒绝服务攻击：（CVE-2015-5239） 权限提升：（CVE-2013-6886） Pcanywhere服务PyAnywhere服务：一款远控工具，有点类似vnc的功能；这个服务在以前很多黑客发的视频里面都有，利用pcanywhere来进行提权； 默认端口：5632 攻击方式： 提权控制服务： 拒绝服务攻击： 代码执行：请参考 Web应用服务端口渗透HTTP服务：对于http服务其实是我们目前这几年比较常见的攻击入口，所以这里会针对http服务进行一个详细的详解； 注：这个板块的所有攻击方式，如果涉及到常规的web漏洞不会提出来，除非是特定的服务器才会产生的漏洞； IIS服务默认端口：80/81/443 攻击方式： IISPUT写文件：利用IIS漏洞，put方法直接将文件放置到服务器上 短文件名泄漏：这种一般没啥影响 解析漏洞：详细见apache服务 Apache/Tomcat/Nginx/Axis2默认端口：80/8080 攻击方式： 爆破：弱口令（爆破manager后台） HTTP慢速攻击：可以把服务器打死，对一些大型的网站有影响； 解析漏洞：请参考 WebLogic默认端口：7001 攻击方式： 爆破：弱口令 4组：用户名密码均一致：system weblogic（密码可能weblogic123） portaladmin guest Congsole后台部署webshell： Java反序列化： 泄漏源代码/列目录：这个太老了，估计网上都没有了吧！ SSRF窥探内网：央视网SSRF可窥探内网 利用Weblogic进行入侵的一些总结 Jboss默认端口8080；其他端口1098/1099/4444/4445/8080/8009/8083/8093 攻击方式： 爆破：弱口令（爆破jboss系统后台） 远程代码执行：由于配置不当造成 Java反序列化： Websphere默认端口：908*；第一个应用就是9080，第二个就是9081；控制台9090 攻击方式： 爆破：弱口令（控制台） 任意文件泄漏：（CVE-2014-0823） Java反序列化 GlassFish默认端口：http 8080；IIOP 3700；控制台4848 攻击方式： 爆破：弱口令（对于控制台） 任意文件读取： 认证绕过： Jenkins默认端口：8080、8089 攻击方式： 爆破：弱口令（默认管理员） 未授权访问： 反序列化： Resin默认端口：8080 攻击方式： 目录遍历 远程文件读取 Jetty默认端口：8080 攻击方式： 远程共享缓冲区溢出 Lotus影响的都是一些大型的企业，特别需要注意，经过以前的测试发现弱口令这个问题经常都存在，可能是很多管理员不知道如何去修改（不要打我）。 默认端口：1352 攻击方式： 爆破：弱口令（admin password）控制台 信息泄露 跨站脚本攻击 数据库服务端口渗透针对所有的数据库攻击方式都存在SQL注入，这里先提出来在下面就不一一写了免得大家说我占篇幅；当然不同的数据库注入技巧可能不一样，特别是NoSQL与传统的SQL数据库不太一样。但是这不是本文需要介绍的重点，后面有时间会写一篇不同数据库的渗透技巧。 MySQL数据库默认端口：3306 攻击方式： 爆破：弱口令 身份认证漏洞：CVE-2012-2122 拒绝服务攻击：利用sql语句是服务器进行死循环打死服务器 Phpmyadmin万能密码绕过：用户名：‘localhost’@’@” 密码任意 MySQL提权总结 MSSQL数据库默认端口：1433（Server 数据库服务）、1434（Monitor 数据库监控） 攻击方式： 爆破：弱口令/使用系统用户 Oracle数据库默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务） 攻击方式： 爆破：弱口令 注入攻击； 漏洞攻击； PostgreSQL数据库PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括我们kali系统中msf也使用这个数据库；浅谈postgresql数据库攻击技术 大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。 默认端口：5432 攻击方式： 爆破：弱口令：postgres postgres 缓冲区溢出：CVE-2014-2669 MongoDB数据库MongoDB：NoSQL数据库；攻击方法与其他数据库类似；关于它的安全讲解：请参考 默认端口：27017 攻击方式： 爆破：弱口令 未授权访问；github有攻击代码；请点击 Redis数据库redis：是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。Exp： 访问密码 e547 默认端口：6379 攻击方式： 爆破：弱口令 未授权访问+配合ssh key提权； SysBase数据库默认端口：服务端口5000；监听端口4100；备份端口：4200 攻击方式： 爆破：弱口令 命令注入： Sybase EAServer命令注入漏洞 DB2数据库默认端口：5000 攻击方式： 安全限制绕过：成功后可执行未授权操作（CVE-2015-1922） 总结一下：对于数据库，我们得知端口很多时候可以帮助我们去渗透，比如得知mysql的 数据库，我们就可以使用SQL注入进行mof、udf等方式提权；如果是mssql我们就可以使用xp_cmdshell来进行提权；如果是其它的数据 库，我们也可以采用对应的方式；比如各大数据库对应它们的默认口令，版本对应的漏洞！ 顺便提一下：很多时候银行企业采用的都是oracle、db2等大型数据库； 邮件服务端口渗透SMTP协议smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！ 默认端口：25（smtp）、465（smtps） 攻击方式： 爆破：弱口令 未授权访问 邮件伪造详解 qq邮箱伪造发件地址，容易被钓鱼利用 众多厂商邮件系统配置不当可伪造邮件人 POP3协议默认端口：109（POP2）、110（POP3）、995（POP3S） 攻击方式： 爆破；弱口令 未授权访问； IMAP协议默认端口：143（imap）、993（imaps） 攻击方式： 爆破：弱口令 配置不当 网络常见协议端口渗透DNS服务默认端口：53 攻击方式： 区域传输漏洞 见2中的总结 DNS泛解析与内容投毒 DHCP服务默认端口：67&amp;68、546（DHCP Failover做双机热备的） 攻击方式： DHCP劫持； 见2中总结 SNMP协议默认端口：161 攻击方式: 爆破：弱口令 基于snmp的反射攻击的理论及其实现 其他端口渗透 Hadoop文件服务默认端口：请参考 Zookeeper服务zookeeper：分布式的，开放源码的分布式应用程序协调服务；提供功能包括：配置维护、域名服务、分布式同步、组服务等。详情请参考百度百科 默认端口：2181 攻击方式： 未授权访问； 网上关于这方面的案例暂时不多，但是对于大数据逐渐泛滥的今天，这些漏洞未来会在乌云上出现一大波！ Zabbix服务zabbix：基于Web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。监视各种网络参数，保证服务器系统的安全运营。 默认端口：8069 攻击方式： 远程命令执行： elasticsearch服务elasticsearch：请百度（因为我觉得我解释不清楚） 默认端口：9200（）、9300（） 攻击方式： 未授权访问； 远程命令执行； 文件遍历； 低版本webshell植入； memcache服务默认端口：11211 Linux R服务R服务：TCP端口512,513和514为著名的rlogin提供服务。在系统中被错误配置从而允许远程访问者从任何地方访问（标准的，rhosts + +）。 默认端口：512（remote process execution）；513（remote login a latelnet）；514（cmd） 攻击方式： 使用rlogin直接登录对方系统； RMIRMI：我们使用这两个端口很少的原因是因为必须是java，而且rmi穿越防火墙并不好穿越；这里我不会去涉及其他的东西，这里提出RMI只是因为在前段时间的java反序列化中，我们的小伙伴Bird写过一个weblogic利用工具，里面涉及到了RMI的一些东西，在有的时候使用socket不能成功时，我们可以使用RMI方式来进行利用； 默认端口：1090（）、1099（） 攻击方式： 远程命令执行（java反序列化，调用rmi方式执行命令） 这就是RMI的魅力了！ 工具下载：请点我 Rsync服务Rsync：类UNIX系统下的数据备份工具（remote sync），属于增量备份；关于它的功能，大家自行百度百科吧，其实上面很多大家也看到了说是端口渗透，其实就是端口对应服务的渗透，服务一般出错就在配置或者版本问题上，rsync也不例外。Rsync默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。 默认端口：873 攻击方式： 未授权访问； 本地提权：rsync默认以root运行，利用rsync上传一个文件，只要这个文件具有s权限，我们执行我们的攻击脚本就可以具有root权限。详细请参考和参考二 Socket代理默认端口：1080 Socket代理针对代理来说没有什么漏洞，一般只是在渗透过程中作为我们的代理，进入内网，或者渗透域和林的时候有帮助。这里不做过多描述，但是可以尝试爆破一下代理的用户名和密码，万一运气好能登录，不也~~~~ 原文链接以及实战案例"},{"title":"c语言2048小游戏","date":"2021-08-01T12:04:40.000Z","url":"/2021/08/01/c%E8%AF%AD%E8%A8%802048%E5%B0%8F%E6%B8%B8%E6%88%8F/","tags":[["c语言","/tags/c%E8%AF%AD%E8%A8%80/"],["项目","/tags/%E9%A1%B9%E7%9B%AE/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"cpp环境搭建正常安装c环境后 增加easyx库 vsc配置需要Visual Studio 2019 Developer Command Prompt v16.6.3 源码"},{"title":"考研规划","date":"2021-08-01T11:05:43.000Z","url":"/2021/08/01/%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/","tags":[["心得","/tags/%E5%BF%83%E5%BE%97/"]],"categories":[["随笔","/categories/%E9%9A%8F%E7%AC%94/"]],"content":"终究打算考研了 原本来打算好好练技术，直接找工作。但是经过种种考虑，发现还是公务员应该更适合我一点 学校想再完成放肆的追逐一把 西安建筑科技大学计算机科学与技术"},{"title":"linux+kali+burp","date":"2021-07-30T00:31:43.000Z","url":"/2021/07/30/linux+kali+burp/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"],["网络安全","/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"],["linux","/tags/linux/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"linux下安装阿帕奇 kali root 密码 kali xshell 连接 kali burp suite 安装"},{"title":"计算机设计大赛国赛答辩复盘","date":"2021-07-25T13:17:22.000Z","url":"/2021/07/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%E5%9B%BD%E8%B5%9B%E7%AD%94%E8%BE%A9%E5%A4%8D%E7%9B%98/","tags":[["经验","/tags/%E7%BB%8F%E9%AA%8C/"],["感悟","/tags/%E6%84%9F%E6%82%9F/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"答辩反思 不要一个人孤军奋战 答辩经验太少 准备不充分 "},{"title":"有关《白筱の猫舍》旧站点","date":"2021-07-22T06:48:47.000Z","url":"/2021/07/22/%E6%97%A7%E7%AB%99%E7%82%B9/","tags":[["服务器","/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":" 由于个人原因旧站点的部分配置文件丢失，现更新新站点旧站点连接 "},{"title":"Kratos-Rebirth主题使用说明","date":"2020-04-07T07:27:05.000Z","url":"/2020/04/07/Kratos-Rebirth%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","tags":[["主题","/tags/%E4%B8%BB%E9%A2%98/"],["文档","/tags/%E6%96%87%E6%A1%A3/"],["咕咕咕","/tags/%E5%92%95%E5%92%95%E5%92%95/"]],"categories":[["教程文档","/categories/%E6%95%99%E7%A8%8B%E6%96%87%E6%A1%A3/"]],"content":"是时候写一个文档了！（被打死如果有什么遗漏的地方欢迎随时向我提出！可以用留言的方式（但有时候邮箱会收不到邮件，比较怨念），或者去Github提一个Issue~文档会尽可能在两边都保持更新，所以只要我没忘记的话应该是没什么大问题哒（光速逃跑） 安装提示由于本模板使用了和默认模板landscape一样的ejs引擎，因此当您完成Hexo站点的安装后，您应该能够直接运行本主题。 在运行之前，请您将_config.yml.example文件复制一份，并重命名为_config.yml； 主题配置配置文件地址：./kratos-rebirth/_config.yml - Global 全局配置 site_analytics : 站点统计代码，这一行代码会被插入到后页脚。 hoster : 网站托管服务提供者，这个是出于感恩性的可选添加内容，这一个链接会被插入到后页脚。 site_logo : 网站的LOGO图片文件，请注意与后面核心JS的设置保持一致。 snow : (true/false)站点下雪特效开关，控制是否在载入下雪相关的代码。 enable_dark : (true/false)站点是否启用暗色模式适配。请注意，即使启用了暗色模式，在亮色的环境下主题仍然会渲染为亮色模式；同时用户可以手动选择使用的颜色（右下角菜单栏按钮处）。 highlight_theme : 代码高亮主题，五选一（light | night | night-eighties | night-blue | night-bright），控制代码高亮时候使用的配色。会根据用户的选择自动加载对应的高亮主题文件。 cdn (true/false)为静态资源开启CDN加速（使用jsDelivr）。请注意，如果您修改了任何静态资源，那么请保持此项为false（同时也是默认状态） check_update (true/false)版本更新检查，无需检查的话就记得关闭哦。 - Index 首页配置相关 post_type (true/false)站点首页是否使用文章主题的显示模式（即一开始可见一部分，点击阅读更多可以加载全文，Hexo许多主题都默认的显示模式（而不是默认的这种卡片式的陈列方式） read_count (true/false)在首页显示每篇文章的阅读量统计（目前仅支持 valine/waline 评论系统的内置统计功能） comment_count (true/false)在首页显示每篇文章的评论量统计（目前仅支持 waline 评论系统的内置统计功能） - Top Menu 顶部导航栏相关 分为menu和label两个模块，控制页首的顶部导航栏内容。menu模块提供导航到的页面位置，label模块提供导航选项卡的显示内容。请注意menu项与label项需要一一对应，否则可能会出现无法正常显示的情况。配置样例随主题附带，可以参考使用。 现已加入二级菜单支持，配置格式为： 请注意关键词submenu不可被改变，其他内容在保证一一对应的情况下可以自定义。具体可以参照主题自带的样例配置。 额外提示：二级菜单功能可能会和旧版本的部分函数发生冲突，如果出现意外报错的话可以考虑检查一下是否存在更新的Hexo版本，或者去Github提一个Issue。目前开发使用的环境(package.json文件)可以参见🎁 使用环境小贴士 - Footer 页脚显示相关 group_link : 控制是否在页面右下角显示群聊的加入按钮。如果显示的话，这里可以指定加群的链接。无需显示的话请留空（而不是删除这个设置项），相关的代码会自行处理结构生成关系。 contact : 联系方式相关，控制是否在页脚(./kratos-rebirth/layout/_partial/footer.ejs)显示各种联系方式的按钮如果要启用的话，请输入相关联系方式的代码，直接输入用户名即可（fediverse的实例需要输入实例地址，邮箱请使用&#x6d;&#x61;&#x69;&#x6c;&#x40;&#x65;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#x6d;这样的格式）；无需显示的内容请留空。 timenotice : 本站运行时间前的提示文本。 icp : ICP备案号，便于生成快捷链接，如萌ICP备22010101号 psr : 公安备案号，便于生成快捷链接，如371402000001 - Post Page 文章页面相关 show_cc : (true/false)控制文章页面(./kratos-rebirth/layout/post.ejs)是否显示CreativeCommon知识共享协议相关的提示内容w donate : (true/false)控制文章页面是否显示捐助的二维码按钮，二维码链接可以在站点的 JavaScript 相关的配置 里进行修改（详见下文） share : (true/false)控制文章页面是否显示分享链接的按钮 comments : (disqus/disqusjs/valine/twikoo/waline/false)会从layout/_comments文件夹中加载指定的评论系统，您也可以自定义其他的解决方案。如果不想开启评论的话，那就还是设置为false吧~ - Disqus 评论相关 shortname : 站点短代号，需与 Disqus Admin - Settings - General - Shortname 的保持一致 - DisqusJS 评论相关这里使用了DisqusJS这个项目，具体的参数配置相关的可以参考原始文档，这里提供的说明仅供参考w shortname : 站点短代号，需与 Disqus Admin - Settings - General - Shortname 的保持一致 sitename : 站点名，建议与 Disqus Admin - Settings - General - Website Name 的保持一致 api : API服务器地址，官方有提供一个反向代理地址，也可以使用其他的API代理服务，或是自建相关的代理，如本站使用自建的代理() apikey : DisqusJS发起请求时使用的公钥，本主题目前只考虑了一个的情况，如果有多请求需求的话可以考虑直接修改./kratos-rebirth/layout/_comments/disqusjs.ejs的代码 admin : 站点评论区管理员的Disqus用户名，可以在 Disqus - Settings - Account - Username 获取或进行修改 adminlabel : 站点管理员的提示标签，可以在 Disqus Admin - Settings - Community - Moderator Badge Text 获取或进行修改 - Valine 评论相关这里使用了Valine这个项目，具体的参数配置相关的可以参考原始文档，这里提供的说明仅供参考；如果您有自定义功能的需要，您可以考虑手动修改layout/_comments/valine.ejs文件中相关的配置内容。 app_id : 您LeanCloud的APP ID app_key : 您LeanCloud的APP Key visitor : (true/false)是否开启Valine的阅读统计功能 enableQQ : (true/false)是否开启昵称框自动获取QQ昵称和QQ头像 - twikoo评论相关 env_id : 您twikoo的Env ID - Waline 评论相关这里使用了Waline这个项目，具体的参数配置相关的可以参考Waline文档的前端配置段，自行调整相关前后端的配置。在该配置段下的内容都会被自动引入至评论模块中。el 和 path 会在页面自动生成，不必加入。 - APlayer 音乐播放器相关（页面左下角） enabled : (true/false)用音乐来点缀全新的体验吧！这里可以选择是否开启aplayer播放器哦~ playlist : APlayer播放使用的歌单地址，可以使用公开的API服务，或是搭建自己使用的后端。我提供了一个后端API的样例，目前本站点使用的就是这个，可以去Github获取。不过这个项目已经过时，我们推荐使用下一种加载方式，即使用MetingJS（默认使用api.i-meto.com/meting/api解析）的方式来加载。 meting : 使用MetingJS时请保留该选项 server : 使用的音乐服务来源：netease, tencent, kugou, xiami, baidu type : 加载的播放列表类型：song, playlist, album, search, artist id : 请求的ID，如曲目ID、播放列表ID、专辑ID、搜索关键词等 order : (list/random)音乐播放的顺序，我个人比较喜欢的是random模式，这样就能避免每次访问博客时，都是从第一首音乐开始播放的尴尬清情况。 - Widgets 侧边栏与挂件 sidebar : (left/right/none)是否启用侧边栏与小工具，若设置为left则会显示在页面左侧，若设置为right则会显示在页面右侧。 widgets : 启用的小部件，默认全部启用，不喜欢的就删掉吧 请注意splitter是分隔符，用于分割活动区域和固定区域（例如默认配置下文章页向下滚动时，About区块会顺势上浮，toc区块会固定在最顶，您可以手动调整各小挂件的位置，删除splitter表示禁用该功能（即所有小挂件均固定显示） avatarUri : 头像的图片地址链接 mobile_toc : 移动端文章目录显示相关配置 hide : (true/false)是否隐藏移动端目录 hide_id : (true/false)移动端目录前是否自动补充的标号 - FancyBox 图片放大显示 fancybox : (true/false)启用图片放大显示工具，点击文章内的图片可以进行全屏放大操作 - Search 搜索 enable : (true/false)是否启用站点搜索功能 path : 搜索数据库的文件名，一般保持默认search.json即可 field : 搜索的区域，可以是页面，或是文章，或是所有内容。默认情况下是仅搜索文章内容。 content : (true/false)搜索内容是否包含文章或是页面的详细内容 - JavaScript 相关的配置 main : 主JavaScript配置 pic : 无图片文章使用的随机图片相关设置 CDN : (true/false)图片是否使用CDN来载入（如果有本地替换过图片的话，请千万不要设置成true） random_amount : 表示图片的编号为 1 ~ 您设定的值，默认是 20 filename : 图片的文件名格式 createTime 站点建立的时间，请改成您站点建立的时间。该项与页脚的运行时间有直接关联，建议按照样例格式进行书写，以免出现莫名其妙的报错。 donateBtn 捐助按钮上显示的文字，建议不要太长以免溢出，如果不显示捐助按钮的话就不用去管它啦~ kr.scanNotice 二维码小窗口上的小标题，如果不显示捐助按钮的话也不用去管它啦~ qr_alipay 支付宝二维码的文件地址 qr_wechat 微信支付二维码的文件地址 siteLeaveEvent (true/false)是否启用站点失焦事件（只是为了卖萌，有可能会影响到历史记录，请谨慎开启） leaveTitle 离开时候站点标题的追加内容 returnTitle 返回时候站点标题的追加内容 expire_day 文章过期提示：距离最后更新时间多少天时，打开文件会给出提示信息 topNavScrollToggle (true/false)顶部导航栏在页面向下滚动时隐藏 - Site verify related 站点所有权验证相关 site_verify : google : Google Search，只填写中间那一串随机码即可 baidu : 百毒搜索，同样只需填写中间的一串随机码 bing : 必应搜索，同样只需填写中间的一串随机码 - Friends page related 友链页面相关 工作模式 我们提供两种配置友链的方式： 一种是自动生成单独的页面，您只需要指定页面的路径（href配置内容）即可自动生成 另一种则是Tag工作模式（href项留空或删除），主题会生成一个方便您使用的小标签，在任何一个页面或是文章内插入{% friends %}即可自动生成友链块。 friends : 友链页面全局字段，删除此字段以禁止自动生成友链页面 href : 友链页面的路径，如friends表示yoursite.ltd/friends/的路径，留空此字段会使用Tag模式 page : 页面相关的参数，您可以配置任意多您需要的页面参数，提供的样例可供您参考 list : 友链列表，您可以参照提供的样例进行对应的复制修改，每一项可以提供显示的名字(name)、简介(bio)、头像链接(avatar)和目标站点链接(link)，无用项建议留空（而不是直接删除） verify : 是否在每次启动时验证友联的可访问性 文章页面配置路径：顶部，文章信息区 (Front-Matter) pic : 可以指定这篇文章是否使用自定义的缩略图名称（在文章资源文件夹内），而不是使用随机化的图标 sticky : (number)重要的文章，把它们置顶吧！数字越大优先级越高哦~ comments : (true/false)是否为单篇文章指定开启或关闭评论区 toc： (true/false)该文章是否需要生成目录 only： 指定文章显示的位置，有以下关键词： home: 在首页显示 category: 在分类页显示 tag: 在标签页显示 留空或是不配置此项，则文章在所有该出现的位置都会显示。层级之间相互平等，没有覆盖关系。特别地，如果配置了此项，但是使用的并不是以上的关键词（例如只留了一个- none，那么文章就被隐藏起来了） 一个完整的 Front-Matter 区样式如下（可自行删去不必要的内容）： 模板与特定页面项目Kratos-Rebirth-Specified-Pages已经废弃，所有功能均已内置，无需使用额外的模块。 此处给出我使用的scaffolds/post.md文件内容： 模板特有标签组件提示信息成功啦o(￣▽￣)ブ 有危险Σ(っ °Д °;)っ 有消息(・∀・(・∀・(・∀・*) 当心哦≧ ﹏ ≦ 折叠内容 这是一条折叠内容 这是一条预先展开的折叠内容 提示面板 这是一个提示面板框 TYPE是面板框的类型，可以是： successs danger info warning 模糊字符这里有一些被模糊的字符 关于MathJax对公式进行的处理功能已废弃，建议使用类似hexo-math类似功能的插件，相关的代码注入部分已经修复。 关于Hexo书写的小技巧Hexo使用了MarkDown，但是在一些细节的处理上有很棒的技巧哦~ 文章概要可以将文章开头的一段作为概要显示在首页主题部分，方法就是在需要分割的地方加入&lt;!-- more --&gt;即可；或者可以在文章头指定excerpt 图片资源Hexo有为每篇文章生成一个资源文件夹，可以将图片资源以{% asset_img 文件名 备注 %}的格式插入文章，本主题引入的fancybox会自动实现对文章内图片的放大功能。 "}]